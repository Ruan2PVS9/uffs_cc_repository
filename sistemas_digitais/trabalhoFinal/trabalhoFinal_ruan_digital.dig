<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>1</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="340" y="180"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes>
        <entry>
          <string>persistTime</string>
          <int>7</int>
        </entry>
      </elementAttributes>
      <pos x="760" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="900" y="280"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>batalhaNaval_ruan</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>SW:10,key:4</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>LEDG:7,LEDR:10,hex0:7,hex1:7,hex2:7,hex3:7</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity batalhaNaval_ruan is
    port(
        SW: in std_logic_vector(9 downto 0);
        key: in std_logic_vector(3 downto 0);

        LEDG: out std_logic_vector(6 downto 0);
        LEDR: out std_logic_vector(9 downto 0);
        hex0: out std_logic_vector(6 downto 0);
        hex1: out std_logic_vector(6 downto 0);
        hex2: out std_logic_vector(6 downto 0);
        hex3: out std_logic_vector(6 downto 0)
        
    );
end batalhaNaval_ruan;

architecture main of batalhaNaval_ruan is

    type estado is (set, shot,win,lost);

    signal state : estado := set;

    -- variable cont_erros : std_logic_vector(2 downto 0) := &quot;000&quot;;
    -- variable cont_acertos : std_logic_vector(1 downto 0) := &quot;00&quot;;
    -- variable cont_disparos : std_logic_vector(3 downto 0) := &quot;0000&quot;;
    -- -- &apos;-&apos; para representar um estado não inicializado.
    -- variable nav1, nav2_casa1, nav2_casa2 : std_logic_vector(3 downto 0) := &quot;----&quot;;
    -- variable decod_disp, cod_disp : std_logic_vector(3 downto 0);


    function codificar(decodificado : std_logic_vector(3 downto 0)) return std_logic_vector is
        variable A, B, C, D : std_logic;
        variable resultado : std_logic_vector(3 downto 0);
    begin
        A := decodificado(3);
        B := decodificado(2);
        C := decodificado(1);
        D := decodificado(0);

        -- a = ~B⋅~C⋅~D + ~A⋅~B⋅C⋅D + ~A⋅B⋅~C⋅D + B⋅C⋅~D + A⋅~D
        resultado(3) := (   (not B and not C and not D) or
                            (not A and not B and C and D) or 
                            (not A and b and not C and D ) or 
                            (B and C and not D) or 
                            (A and not D)
                        );

        -- b = ~A⋅~B⋅D + ~A⋅C + ~B⋅C + C⋅~D
        resultado(2) := (   (not A and not B and D) or 
                            (not A and C) or 
                            (not B and C) or 
                            (c and not D) 
                        );
        
        -- c = ~A⋅~D + ~B⋅~D + A⋅C⋅D
        resultado(1) := (   (not A and not D) or 
                            (not B and not D) or 
                            (A and C and D) 
                        );

        -- d = ~A⋅~B⋅C + ~A⋅C⋅D + A⋅~B⋅~D + A⋅~C⋅~D + A⋅B⋅~C + B⋅C⋅D
        resultado(0) := (   (not A and not B and C) or 
                            (not A and C and D) or 
                            (A and not B and not D) or 
                            (A and not C and not D) or 
                            (A and B and not C) or 
                            (B and C and D) 
                        );

        return resultado;
    end codificar;

    function decodificar(codificado : std_logic_vector(3 downto 0)) return std_logic_vector is
        variable a, b, c, d : std_logic;
        variable resultado : std_logic_vector(3 downto 0);
    begin
        a := codificado(3);
        b := codificado(2);
        c := codificado(1);
        d := codificado(0);
        -- A = ~a⋅~b⋅~c + ~b⋅d + ~a⋅b⋅c⋅~d + a⋅b⋅~c⋅~d + a⋅c⋅d
        resultado(3) := (   (not a and not b and not c) or
                            (not b and d) or
                            (not a and b and c and not d) or
                            (a and b and not c and not d) or
                            (a and c and d) 
                        );

        -- B = ~a⋅~b⋅c + ~a⋅~c⋅d + a⋅~b⋅~c + a⋅b⋅~d
        resultado(2) := (   (not a and not b and c) or
                            (not a and not c and d) or
                            (a and not b and not c) or
                            (a and b and not d)
                        );

        -- C = ~a⋅c⋅d + b⋅d + b⋅c
        resultado(1) := (   (not a and c and d) or
                            (b and d) or
                            (b and c) 
                        );

        -- D = ~a⋅~b⋅d + ~b⋅~c⋅~d + ~a⋅b⋅~d + b⋅~c⋅d
        resultado(0) := (   (not a and not b and d) or
                            (not b and not c and not d) or
                            (not a and b and not d) or
                            (b and not c and d)
                        );

        return resultado;
    end decodificar;

    -- function set_casa2(cod_casa1 : std_logic_vector(3 downto 0); v_or_h : std_logic) return std_logic_vector is
    --     variable cod_casa2 : std_logic_vector(3 downto 0);
    --     variable decod_casa_1 : std_logic_vector(3 downto 0);
    --     variable decod_casa_2 : std_logic_vector(3 downto 0);
    -- begin
    --     decod_casa_1 := decodificar(cod_casa1);
    --     if (v_or_h = &quot;0&quot;) then
    --         if decod_casa_1 = &quot;0011&quot; then
    --             decod_casa_2 := &quot;0010&quot;;
    --         elsif decod_casa_1 = &quot;0111&quot; then
    --             decod_casa_2 := &quot;0110&quot;;
    --         elsif decod_casa_1 = &quot;1011&quot; then
    --             decod_casa_2 := &quot;1010&quot;;
    --         elsif decod_casa_1 = &quot;1111&quot; then
    --             decod_casa_2 := &quot;1110&quot;;
    --         else
    --             decod_casa_2 := decod_casa_1 + &quot;0001&quot;;
    --         end if ;
    --     elsif (v_or_h = &quot;1&quot;) then
    --         if decod_casa_1 = &quot;1100&quot; then
    --             decod_casa_2 := &quot;1000&quot;;
    --         elsif decod_casa_1 = &quot;1101&quot; then
    --             decod_casa_2 := &quot;1001&quot;;
    --         elsif decod_casa_1 = &quot;1110&quot; then
    --             decod_casa_2 := &quot;1010&quot;;
    --         elsif decod_casa_1 = &quot;1111&quot; then
    --             decod_casa_2 := &quot;1011&quot;;
    --         else
    --             decod_casa_2 := decod_casa_1 + &quot;0100&quot;;
    --         end if ;
    --     end if ;
    --     cod_casa2 := codificar(decod_casa_2);
    --     return cod_casa2;
    -- end set_casa2;
    
begin
    -- variable cont_erros : std_logic_vector(2 downto 0) := &quot;000&quot;;
    -- variable cont_acertos : std_logic_vector(1 downto 0) := &quot;00&quot;;
    -- variable cont_disparos : std_logic_vector(3 downto 0) := &quot;0000&quot;;
    -- -- &apos;-&apos; para representar um estado não inicializado.
    -- variable nav1, nav2_casa1, nav2_casa2 : std_logic_vector(3 downto 0) := &quot;----&quot;;
    -- variable decod_disp, cod_disp : std_logic_vector(3 downto 0);

    process(key(0), key(1))

    -- variable cont_erros : std_logic_vector(2 downto 0) := &quot;000&quot;;
    -- variable cont_acertos : std_logic_vector(1 downto 0) := &quot;00&quot;;
    -- variable cont_disparos : std_logic_vector(3 downto 0) := &quot;0000&quot;;


    variable cont_erros : std_logic_vector(2 downto 0) := &quot;000&quot;;
    variable cont_acertos : std_logic_vector(1 downto 0) := &quot;00&quot;;
    variable cont_disparos : std_logic_vector(3 downto 0) := &quot;0000&quot;;
    -- &apos;-&apos; para representar um estado não inicializado.
    variable nav1, nav2_casa1, nav2_casa2 : std_logic_vector(3 downto 0) := &quot;----&quot;;
    variable decod_disp, cod_disp : std_logic_vector(3 downto 0);
    variable decod_casa_1, decod_casa_2 : std_logic_vector(3 downto 0) := &quot;----&quot;;
    variable somar3 :std_logic_vector(3 downto 0) ;
    variable somar1 :std_logic_vector(1 downto 0) ;
    variable somar2 :std_logic_vector(2 downto 0) ;

    begin

    if (key(1) = &apos;0&apos;) then
        
        cont_erros := &quot;000&quot;;
        cont_acertos := &quot;00&quot;;
        cont_disparos := &quot;0000&quot;;

        nav1 := &quot;----&quot;;
        nav2_casa1 := &quot;----&quot;;
        nav2_casa2 := &quot;----&quot;;

        ledg &lt;= &quot;1111111&quot;;
        ledr &lt;= &quot;1111111111&quot;;
        ledr &lt;= &quot;0000000000&quot;;
        ledg &lt;= &quot;0000000&quot;;


    elsif (key(0)&apos;EVENT and key(0) = &apos;0&apos;) then
        if (state = set) then
            if (sw(4) = &apos;0&apos; and key(2) = &apos;0&apos;) then
                -- set1 = 
                -- hex &lt;= &quot;0123456&quot;

                hex3 &lt;= &quot;1011011&quot;;
                hex2 &lt;= &quot;1001111&quot;;
                hex1 &lt;= &quot;0001111&quot;;
                hex0 &lt;= &quot;1001111&quot;;

                nav1(0) := sw(0);
                nav1(1) := sw(1);
                nav1(2) := sw(2);
                nav1(3) := sw(3);
                ledg(0) &lt;= &apos;1&apos;;
            elsif (sw(4) = &apos;1&apos; and key(2) = &apos;0&apos;) then
                -- set2 = 
                -- hex &lt;= &quot;0123456&quot;

                hex3 &lt;= &quot;1011011&quot;;
                hex2 &lt;= &quot;1001111&quot;;
                hex1 &lt;= &quot;0001111&quot;;
                hex0 &lt;= &quot;1101101&quot;;

                nav2_casa1(0) := sw(0);
                nav2_casa1(1) := sw(1);
                nav2_casa1(2) := sw(2);
                nav2_casa1(3) := sw(3);
                ledg(1) &lt;= &apos;1&apos;;


                decod_casa_1 := decodificar(nav2_casa1);
                if (sw(6) = &apos;0&apos;) then
                    -- nav2_casa2 &lt;= set_casa2(nav2_casa1,&quot;0&quot;);
                    if (decod_casa_1 = &quot;0011&quot;) then
                        decod_casa_2 := &quot;0010&quot;;
                    elsif (decod_casa_1 = &quot;0111&quot;) then
                        decod_casa_2 := &quot;0110&quot;;
                    elsif (decod_casa_1 = &quot;1011&quot;) then
                        decod_casa_2 := &quot;1010&quot;;
                    elsif (decod_casa_1 = &quot;1111&quot;) then
                        decod_casa_2 := &quot;1110&quot;;
                    else
                        somar3 := &quot;0001&quot;;
                        decod_casa_2 := std_logic_vector(unsigned(decod_casa_1) + unsigned(somar3));
                    end if ;
                elsif (sw(6) = &apos;1&apos;) then
                    -- nav2_casa2 &lt;= set_casa2(nav2_casa1,&quot;1&quot;);
                    if (decod_casa_1 = &quot;1100&quot;) then
                        decod_casa_2 := &quot;1000&quot;;
                    elsif (decod_casa_1 = &quot;1101&quot;) then
                        decod_casa_2 := &quot;1001&quot;;
                    elsif (decod_casa_1 = &quot;1110&quot;) then
                        decod_casa_2 := &quot;1010&quot;;
                    elsif (decod_casa_1 = &quot;1111&quot;) then
                        decod_casa_2 := &quot;1011&quot;;
                    else
                        somar3 := &quot;0100&quot;;
                        decod_casa_2 := std_logic_vector(unsigned(decod_casa_1) + unsigned(somar3));
                    end if ;
                end if;
                if (nav2_casa2 /= &quot;----&quot;) then
                    nav2_casa2 := codificar(decod_casa_2);
                    ledg(2) &lt;= &apos;1&apos;;
                end if;
            end if;
            if ((nav1 /= &quot;----&quot;) and (nav2_casa1 /= &quot;----&quot;) and (nav2_casa2 /= &quot;----&quot;) and (sw(5) = &apos;1&apos;)) then
                state &lt;= shot;
            end if ;
        elsif (state = shot) then
            decod_disp(0) := sw(0);
            decod_disp(1) := sw(1);
            decod_disp(2) := sw(2);
            decod_disp(3) := sw(3);
            if (key(2) = &apos;0&apos;) then
                -- disX = 
                -- hex &lt;= &quot;0123456&quot;

                hex3 &lt;= &quot;1111110&quot;;
                hex2 &lt;= &quot;1111001&quot;;
                hex1 &lt;= &quot;1011011&quot;;
                case cont_disparos is
                    when &quot;0000&quot; =&gt;
                        hex0 &lt;= &quot;1001111&quot;;

                    when &quot;0001&quot; =&gt;
                        hex0 &lt;= &quot;1101101&quot;;

                    when &quot;0010&quot; =&gt;
                        hex0 &lt;= &quot;1101101&quot;;

                    when others =&gt;
                        -- cont_erros &lt;= cont_erros + &quot;001&quot;;
                        ledr &lt;= &quot;1111111111&quot;;
                end case;
                -- hex0 &lt;= &quot;0123456&quot;;

                cod_disp := codificar(decod_disp);

                if (cod_disp = nav1) then
                    ledg(0) &lt;= &apos;0&apos;;
                    somar1 := &quot;01&quot;;
                    cont_acertos := std_logic_vector(unsigned(cont_acertos) + unsigned(somar1));
                elsif (cod_disp = nav2_casa1) then
                    ledg(1) &lt;= &apos;0&apos;;
                    somar1 := &quot;01&quot;;
                    cont_acertos := std_logic_vector(unsigned(cont_acertos) + unsigned(somar1));
                elsif (cod_disp = nav2_casa2) then
                    ledg(2) &lt;= &apos;0&apos;;
                    somar1 := &quot;01&quot;;
                    cont_acertos := std_logic_vector(unsigned(cont_acertos) + unsigned(somar1));
                else
                    somar2 :=&quot;001&quot;;
                    cont_erros := std_logic_vector(unsigned(cont_erros) + unsigned(somar2));
                    
                end if ;
                somar3 := &quot;0001&quot;;
                cont_disparos := std_logic_vector(unsigned(cont_disparos) + unsigned(somar2));
                
            end if;
            if (cont_acertos = &quot;11&quot;) then
                state &lt;= lost;
            
            elsif (cont_acertos = &quot;110&quot;) then
                state &lt;= win;
                
            end if ;
        end if;
    end if ;
    end process;
    process(state)
    begin
        if (state = win) then
            ledg &lt;= &quot;1111111&quot;;
            ledr &lt;= &quot;0000000000&quot;;
        elsif (state = lost) then
            ledg &lt;= &quot;0000000&quot;;
            ledr &lt;= &quot;1111111111&quot;;
            
        end if ;

    end process;



end architecture;</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>10</int>
        </entry>
      </elementAttributes>
      <pos x="540" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="940" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="1020" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color>
            <red>51</red>
            <green>255</green>
            <blue>51</blue>
            <alpha>255</alpha>
          </awt-color>
        </entry>
      </elementAttributes>
      <pos x="900" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="1060" y="360"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="1100" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="1140" y="400"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="1180" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="1220" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="1260" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes/>
      <pos x="980" y="320"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="860" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="960" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>Seven-Seg</elementName>
      <elementAttributes/>
      <pos x="1060" y="40"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color reference="../../../../visualElement[7]/elementAttributes/entry/awt-color"/>
        </entry>
      </elementAttributes>
      <pos x="900" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color reference="../../../../visualElement[7]/elementAttributes/entry/awt-color"/>
        </entry>
      </elementAttributes>
      <pos x="900" y="480"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color reference="../../../../visualElement[7]/elementAttributes/entry/awt-color"/>
        </entry>
      </elementAttributes>
      <pos x="900" y="520"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color reference="../../../../visualElement[7]/elementAttributes/entry/awt-color"/>
        </entry>
      </elementAttributes>
      <pos x="900" y="560"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color reference="../../../../visualElement[7]/elementAttributes/entry/awt-color"/>
        </entry>
      </elementAttributes>
      <pos x="900" y="600"/>
    </visualElement>
    <visualElement>
      <elementName>LED</elementName>
      <elementAttributes>
        <entry>
          <string>Color</string>
          <awt-color reference="../../../../visualElement[7]/elementAttributes/entry/awt-color"/>
        </entry>
      </elementAttributes>
      <pos x="900" y="640"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="340" y="220"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="340" y="260"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="340" y="300"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="340" y="340"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="340" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="340" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="340" y="460"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="340" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes/>
      <pos x="340" y="540"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes/>
      <pos x="460" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes/>
      <pos x="520" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes/>
      <pos x="580" y="580"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes/>
      <pos x="640" y="580"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="780" y="480"/>
      <p2 x="900" y="480"/>
    </wire>
    <wire>
      <p1 x="780" y="640"/>
      <p2 x="900" y="640"/>
    </wire>
    <wire>
      <p1 x="700" y="0"/>
      <p2 x="780" y="0"/>
    </wire>
    <wire>
      <p1 x="340" y="260"/>
      <p2 x="540" y="260"/>
    </wire>
    <wire>
      <p1 x="740" y="260"/>
      <p2 x="780" y="260"/>
    </wire>
    <wire>
      <p1 x="340" y="420"/>
      <p2 x="540" y="420"/>
    </wire>
    <wire>
      <p1 x="700" y="-40"/>
      <p2 x="820" y="-40"/>
    </wire>
    <wire>
      <p1 x="780" y="520"/>
      <p2 x="900" y="520"/>
    </wire>
    <wire>
      <p1 x="700" y="360"/>
      <p2 x="760" y="360"/>
    </wire>
    <wire>
      <p1 x="800" y="360"/>
      <p2 x="820" y="360"/>
    </wire>
    <wire>
      <p1 x="780" y="360"/>
      <p2 x="800" y="360"/>
    </wire>
    <wire>
      <p1 x="760" y="360"/>
      <p2 x="780" y="360"/>
    </wire>
    <wire>
      <p1 x="340" y="300"/>
      <p2 x="540" y="300"/>
    </wire>
    <wire>
      <p1 x="340" y="460"/>
      <p2 x="540" y="460"/>
    </wire>
    <wire>
      <p1 x="780" y="400"/>
      <p2 x="900" y="400"/>
    </wire>
    <wire>
      <p1 x="780" y="560"/>
      <p2 x="900" y="560"/>
    </wire>
    <wire>
      <p1 x="700" y="-20"/>
      <p2 x="800" y="-20"/>
    </wire>
    <wire>
      <p1 x="340" y="180"/>
      <p2 x="540" y="180"/>
    </wire>
    <wire>
      <p1 x="340" y="340"/>
      <p2 x="540" y="340"/>
    </wire>
    <wire>
      <p1 x="340" y="500"/>
      <p2 x="540" y="500"/>
    </wire>
    <wire>
      <p1 x="700" y="20"/>
      <p2 x="760" y="20"/>
    </wire>
    <wire>
      <p1 x="840" y="280"/>
      <p2 x="880" y="280"/>
    </wire>
    <wire>
      <p1 x="460" y="280"/>
      <p2 x="520" y="280"/>
    </wire>
    <wire>
      <p1 x="520" y="280"/>
      <p2 x="540" y="280"/>
    </wire>
    <wire>
      <p1 x="580" y="280"/>
      <p2 x="640" y="280"/>
    </wire>
    <wire>
      <p1 x="540" y="280"/>
      <p2 x="580" y="280"/>
    </wire>
    <wire>
      <p1 x="780" y="440"/>
      <p2 x="900" y="440"/>
    </wire>
    <wire>
      <p1 x="780" y="600"/>
      <p2 x="900" y="600"/>
    </wire>
    <wire>
      <p1 x="340" y="220"/>
      <p2 x="540" y="220"/>
    </wire>
    <wire>
      <p1 x="340" y="380"/>
      <p2 x="540" y="380"/>
    </wire>
    <wire>
      <p1 x="340" y="540"/>
      <p2 x="540" y="540"/>
    </wire>
    <wire>
      <p1 x="640" y="280"/>
      <p2 x="640" y="580"/>
    </wire>
    <wire>
      <p1 x="800" y="180"/>
      <p2 x="800" y="360"/>
    </wire>
    <wire>
      <p1 x="800" y="-20"/>
      <p2 x="800" y="40"/>
    </wire>
    <wire>
      <p1 x="880" y="280"/>
      <p2 x="880" y="320"/>
    </wire>
    <wire>
      <p1 x="580" y="280"/>
      <p2 x="580" y="580"/>
    </wire>
    <wire>
      <p1 x="820" y="-40"/>
      <p2 x="820" y="40"/>
    </wire>
    <wire>
      <p1 x="820" y="180"/>
      <p2 x="820" y="360"/>
    </wire>
    <wire>
      <p1 x="520" y="280"/>
      <p2 x="520" y="580"/>
    </wire>
    <wire>
      <p1 x="760" y="180"/>
      <p2 x="760" y="360"/>
    </wire>
    <wire>
      <p1 x="760" y="20"/>
      <p2 x="760" y="40"/>
    </wire>
    <wire>
      <p1 x="540" y="180"/>
      <p2 x="540" y="220"/>
    </wire>
    <wire>
      <p1 x="540" y="420"/>
      <p2 x="540" y="460"/>
    </wire>
    <wire>
      <p1 x="540" y="300"/>
      <p2 x="540" y="340"/>
    </wire>
    <wire>
      <p1 x="540" y="460"/>
      <p2 x="540" y="500"/>
    </wire>
    <wire>
      <p1 x="540" y="340"/>
      <p2 x="540" y="380"/>
    </wire>
    <wire>
      <p1 x="540" y="220"/>
      <p2 x="540" y="260"/>
    </wire>
    <wire>
      <p1 x="540" y="500"/>
      <p2 x="540" y="540"/>
    </wire>
    <wire>
      <p1 x="540" y="380"/>
      <p2 x="540" y="420"/>
    </wire>
    <wire>
      <p1 x="540" y="260"/>
      <p2 x="540" y="280"/>
    </wire>
    <wire>
      <p1 x="540" y="280"/>
      <p2 x="540" y="300"/>
    </wire>
    <wire>
      <p1 x="460" y="280"/>
      <p2 x="460" y="580"/>
    </wire>
    <wire>
      <p1 x="780" y="0"/>
      <p2 x="780" y="40"/>
    </wire>
    <wire>
      <p1 x="780" y="180"/>
      <p2 x="780" y="260"/>
    </wire>
    <wire>
      <p1 x="780" y="400"/>
      <p2 x="780" y="440"/>
    </wire>
    <wire>
      <p1 x="780" y="560"/>
      <p2 x="780" y="600"/>
    </wire>
    <wire>
      <p1 x="780" y="440"/>
      <p2 x="780" y="480"/>
    </wire>
    <wire>
      <p1 x="780" y="600"/>
      <p2 x="780" y="640"/>
    </wire>
    <wire>
      <p1 x="780" y="480"/>
      <p2 x="780" y="520"/>
    </wire>
    <wire>
      <p1 x="780" y="360"/>
      <p2 x="780" y="400"/>
    </wire>
    <wire>
      <p1 x="780" y="260"/>
      <p2 x="780" y="360"/>
    </wire>
    <wire>
      <p1 x="780" y="520"/>
      <p2 x="780" y="560"/>
    </wire>
    <wire>
      <p1 x="700" y="-40"/>
      <p2 x="700" y="-20"/>
    </wire>
    <wire>
      <p1 x="700" y="-20"/>
      <p2 x="700" y="0"/>
    </wire>
    <wire>
      <p1 x="700" y="0"/>
      <p2 x="700" y="20"/>
    </wire>
    <wire>
      <p1 x="700" y="20"/>
      <p2 x="700" y="360"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>